#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

# define BUFFER_SIZE 10

typedef struct node
{
	char		*data;
	struct node	*next;
} Node;

int ft_lb_pos(char	*str)
{
	int	i;

	if (!str)
		return (0);
	i = -1;
	while (str[++i])
		if (str[i] == '\n')
			return (i + 1);
	return (0);
}

void	ft_node_add_front(Node **head, Node *new)
{
	Node *temp;

	new->next = NULL;
	if (!(*head))
	{
		*head = new;
		return ;
	}
	temp = *head;
	while (temp->next != NULL)
		temp = temp->next;
	temp->next=new;
}

int	ft_count_nodes(Node	*head)
{
	int		i;
	Node	*current;

	if (!head)
		return (0);
	i = 0;
	current = head;
	while (current->next != NULL)
	{
		current = current->next;
		i++;
	}
	return (i);
}

char	*ft_join_nodes_data(Node **head)
{
	Node	*temp;
	char	*output;
	char	*heap;
	int		i;
	int		j;

	j = 0;
	temp = *head;
	output = malloc(sizeof(char) * ft_count_nodes(*head) * (BUFFER_SIZE + 1));
	if (!output)
		return (NULL);
	while (temp)
	{
		i = 0;
		heap = malloc(sizeof(char) * BUFFER_SIZE + 1);
		heap = temp->data;
		while (heap[i])
		{
			output[j] = heap[i];
			i++;
			j++;
		}
		temp = temp->next;
	}
	output[j] = 0;
	if (heap)
		free(heap);
	return(output);
}

char	*ft_gnl_read(int fd, char *line, Node **heap)
{
	int		end;
	Node	*temp;

	/* NEED TO CLEAN ALL NODES */
	end = BUFFER_SIZE;
	while (end > 0)
	{
		temp = malloc(sizeof(Node));
		if (!temp)
			return (NULL);
		temp->data = malloc(sizeof(char) * (BUFFER_SIZE + 1));
		end = read(fd, temp->data, BUFFER_SIZE);
		if (end < 0)
		{
			printf("end < 0");
			return (NULL);
		}
		ft_node_add_front(heap, temp);
		if (ft_lb_pos(temp->data) > 0)
			break ;
	}
	line = ft_join_nodes_data(heap);
	return (line);
}

char	*ft_left(char *str, int i)
{
	char	*temp;
	int		j;

	temp = malloc(sizeof(char) * (i + 1));
	if (!temp)
		return (0);
	j = -1;
	while (++j < i)
		temp[j] = str[j];
	temp[++j] = 0;
	return (temp);
}

void	ft_clean_nodes_data(Node	**head)
{
	Node	*temp;

	temp = *head;
	while (temp)
	{
		free(temp->data);
		temp->data = 0;
		temp = temp->next;
	}
	return ;
}

char *get_next_line(int	fd)
{
	static char	*stack;
	char		*line;
	Node		*head;

	/* if (!fd || fd < 2 || fd >= FOPEN_MAX)
		return (NULL); */
	/* *line = ft_gnl_read(fd, stack, &head); */
	if (ft_lb_pos(stack) == 0)
		stack = ft_gnl_read(fd, stack, &head);
	line = stack;
	/* if (ft_lb_pos(line) > 0)
		line = ft_left(line, ft_lb_pos(line)); */
	/* if (line)
		free(line); */
	/* if(stack)
		free(stack); */
	/* ft_clean_nodes_data(&head); */
	return (line);
}

int	main(void)
{
	int fd;

	fd = open("foobar.txt", O_RDONLY);
	printf("%s", get_next_line(fd));
	printf("%s", get_next_line(fd));
	close(fd);
	return (0);
}

/* char	*get_next_line(int fd)
{
	static Node *stack;
	static char	*output;

	output = ft_gnl_read(fd, stack);
	return (output);
} */
